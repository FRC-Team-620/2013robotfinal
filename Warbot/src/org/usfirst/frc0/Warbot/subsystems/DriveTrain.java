// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc0.Warbot.subsystems;
import org.usfirst.frc0.Warbot.RobotMap;
import org.usfirst.frc0.Warbot.commands.*;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType; 
import edu.wpi.first.wpilibj.Encoder.PIDSourceParameter;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
/**
 *
 */
public class DriveTrain extends PIDSubsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    Encoder leftEncoder = RobotMap.driveTrainLeftEncoder;
    Encoder rightEncoder = RobotMap.driveTrainRightEncoder;
    Gyro gyro = RobotMap.driveTrainGyro;
    SpeedController rightSpeedController = RobotMap.driveTrainRightSpeedController;
    SpeedController leftSpeedController = RobotMap.driveTrainLeftSpeedController;
    RobotDrive robotDrive = RobotMap.driveTrainRobotDrive;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // Initialize your subsystem here
    public DriveTrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        super("DriveTrain", 0.04, 0.0, 0.0);
        setAbsoluteTolerance(3.0);
        getPIDController().setContinuous(true);
        LiveWindow.addActuator("Drive Train", "PIDSubsystem Controller", getPIDController());
        getPIDController().setOutputRange(-0.6, 0.5);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        // Use these to get going:
        // setSetpoint() -  Sets where the PID controller should move the system
        //                  to
        // enable() - Enables the PID controller.
    }
    
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new DriveWithJoysticks());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    protected double returnPIDInput() {
        // Return your input value for the PID loop
        // e.g. a sensor, like a potentiometer:
        // yourPot.getAverageVoltage() / kYourMaxVoltage;
	SmartDashboard.putNumber("gyro angle", gyro.pidGet());
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
        return gyro.pidGet();
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
    }
    
    protected void usePIDOutput(double output) {
        // Use output to drive your system, like a motor
        // e.g. yourMotor.set(output);
        SmartDashboard.putNumber("PIDOutput", output);
	RobotMap.driveTrainRobotDrive.arcadeDrive(0, output);
    }
    public void takeJoystickInputs(Joystick left, Joystick right) {
            SmartDashboard.putNumber("Tank Drive Left", left.getMagnitude());
            SmartDashboard.putNumber("Tank Drive Right", right.getMagnitude());
            robotDrive.tankDrive(left, right);
    }
    
    public void stop() {
        robotDrive.drive(0,0);
        getPIDController().disable();
    }
    
    public void turn(double angle) {
        gyro.reset();
        getPIDController().setSetpoint(angle);
        getPIDController().enable();
    }   
    
}
